
SpringSecurity 강좌 정리


  1) 개요

    - 사용자의 인증(Authentication) 과 권한( Authorization )에 활용하는 
      Spring 의 서브 프로젝트임.

     Authentication(인증): id/pw 이용해서 회원임을 확인하는 작업.
     Authorization(권한) : 인증후  접근 가능한 자원을 구분하는 작업.

    
    - SpringBoot3 에서는 Spring security 6.X 지원함.


   
   2) 실습1
     
     - 강사가 제공해준 프로젝트 파일을 다운받고 압축 풀기
     - C:\springboot3_study\sts-4.27.0.RELEASE\workspace 에 붙여넣기
     - import > maven > Existing Maven Project 선택
     > Root Directory > workspace 에 있는 boot3.2.8_SpringSecurity01_제공파일 선택 > finish 


   3) 실습2- 의존성 추가

      - pom.xml
       <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

     - 의존성 추가후 실행했을 때 상황

       가. /home 요청했을 때  자동으로 login 화면이 보여짐. ( 인증작업을 하기 위해서 )
          자동으로 /logout 기능도 제공됨.

       나. 사용자명과 비번 입력

         사용자명: user
	 비번:   c3991d3d-8bd5-4ee3-8a29-8d8e34f18828       <=== console에서 제공됨. 실행할때마다 매번 새로운 값이 제공됨.
	                                                       암호화 되어 있음.(필수)
							       세션(HttpSession) 기반.

	 사용자명과 비번을 임의로 지정 가능
	 # application.properties
          spring.security.user.name=user
	  spring.security.user.password=1234


       다. 정확한 사용자명과 비번을 입력하면 	 /home 요청이 됨.						       
						
							   
   3) 실습3- 회원가입 + 반드시 비번 암호화(*****************)

       가. member 테이블

          use testdb;
          drop table if exists member;
	  create table member(	
	     userid varchar(255) primary key,
	     passwd varchar(255) not null,
	     username varchar(255) not null
	  );

       나. DB 연동 위한 의존성 설정
           
	   <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-validation</artifactId>
	</dependency>		
	<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>3.0.3</version>
	</dependency>
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
	</dependency>
         
	다. application.properties 에 DB 연동 설정

		  
	# DB 연동
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/shop
	spring.datasource.username=shop
	spring.datasource.password=shop
	# DeptMapper 등록
	mybatis.mapper-locations=com/exam/config/*Mapper.xml
	# DTO 별칭
	mybatis.type-aliases-package=com.exam.dto

	#  SQL의 컬럼명: target_date   ,  DTO 변수명: targetDate  인 경우
	#  별칭 또는 resultMap 으로 명시적으로 설정해서 사용했음.
	#  이 작업을 자동으로 할 수 있다.
	mybatis.configuration.map-underscore-to-camel-case=true

	라. MemberController/MemberDTO/MemberService/MemberServiceImpl/MemberMapper.java/MemberMapper.xml


	 -  작성후에 

	    http://localhost:8090/app/signup 
	    또는
	    http://localhost:8090/app/home 

	    요청하면 Spring Security에 의해서 인증하도록 하기 위해서 
	    http://localhost:8090/app/login 리다이렉트되어 로그인 화면이 나온다.

	    즉 Spring Security 는 인증되지 않으면 어떠한 자원도 접근이 불가능하도록 처리한다.

	    인증후에는 인증된 세션정보가 웹브라우저에 남아있기 때문에 다른 자원을 접근할 수 있게된다.


         
	 - 회원가입시 비번은 반드시 암호화해야 된다. (***************************)

	  
		//비번 암호화 (필수*******************************)
		String pw = dto.getPasswd(); //암호화 안된 pw: 1234
		String encodedPW = new BCryptPasswordEncoder().encode(pw);
		
		logger.info("LOGGER: pw: {}" , pw);
		logger.info("LOGGER: encodedPW: {}" , encodedPW);
		
		dto.setPasswd(encodedPW);

//////////////////////////////////////////////////////////////////////////////////////////////////////

    4) 사용자가 만든 로그인 화면 사용하기

       - LoginController.java
	 =>   @GetMapping(value={"/login"})
		public String showHomePage() {
			return "loginForm";
		}
        ==> @PostMapping 구현 안함.
	    실제 로그인 체크 기능은 따로 구현함( implments AuthenticationProvider )

       - loginForm.jsp /include/loginForm.jsp

       - 반드시 method="post" 로 요청해야 된다.

     
    5) SecurityFilterChain 작성
    https://docs.spring.io/spring-security/reference/6.3/servlet/architecture.html#servlet-securityfilterchain
    https://docs.spring.io/spring-security/site/docs/6.2.8/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html#authorizeHttpRequests(org.springframework.security.config.Customizer)

      웹브라우저 ---필터1-->필터2-->필터3---> Controller

       - /home /signup 요청시 /login 리다이렉트됨.
         그런데 인증이 필요없는 요청은 제외시켜야 됨.
       - CSRF 비활성 ( 도메인간 요청 위조 )
       https://docs.spring.io/spring-security/reference/6.1/features/exploits/csrf.html
         ==> POST(저장)/PUT(수정)는 DB에 영향이 미침.
	 ==> Spring Security는 기본적으로 CSRF 방지기능이 활성화되어 있음.
       
       - 사용자가 만든 로그인화면 정보를 알려줌.
         예> LoginController에서 @GetMapping(value={"/login"}) 정보
	    loginForm.jsp의 <form action="auth"> 정보
	    loginForm.jsp의 name="userid" 와 name="passwd" 정보

       - 성공시 리다이렉트 화면 정보
       - 실패시 리다이렉트 화면 정보

       - 로그아웃 설정
         ==> 어떤 요청으로 로그아웃 할 건지 지정 가능 예> http://~/logout
	 ==> 로그아웃이 성공시 리다이렉트 화면 정보

   ==> com.exam.security.SecurityFilterChainConfig.java 

  

    6) static 관련 자원 허용 ( image, js, css 등 )

       // 정적 리소스 spring security 대상에서 제외
	@Bean
	public WebSecurityCustomizer webSecurityCustomizer() {
	  return (web) ->
	                  web
	                      .ignoring()
	                      .requestMatchers(
	                        PathRequest.toStaticResources().atCommonLocations()
	                      );
	}

 
     7) 사용자 입력한 userid와 passwd 를 인증하는 AuthenticationProvider 작성.
https://docs.spring.io/spring-security/reference/6.3/servlet/authentication/architecture.html#servlet-authentication-authenticationprovider
https://docs.spring.io/spring-security/site/docs/6.2.8/api/org/springframework/security/authentication/AuthenticationProvider.html
https://github.com/spring-projects/spring-security-samples/tree/main/servlet/spring-boot/java
        @Component
public class AuthProvider implements AuthenticationProvider {

	private Logger logger = LoggerFactory.getLogger(getClass());
	
	AuthenticationService service;
	
	public AuthProvider(AuthenticationService service) {
		this.service = service;
	}

	// 사용자가 입력된 userid와 passwd 이용해서 DB 연동해서 체크
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		logger.info("LOGGER:AuthProvider.authenticate 호출");
		
		String userid = (String)authentication.getPrincipal();
		String passwd = (String)authentication.getCredentials(); //1234
		
		//DB 연동해서 체크. userid에 해당하는 MemberDTO 얻기
		MemberDTO dto = service.findByUserid(userid);
		
		// passwd 와 encodedPasswd 비교
		PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		
		UsernamePasswordAuthenticationToken token = null;
		
		if( dto != null && passwordEncoder.matches(passwd, dto.getPasswd())) {

			// UsernamePasswordAuthenticationToken(Object principal, Object credentials, 
			//                           Collection<? extends GrantedAuthority> authorities)
			
			MemberDTO new_dto = new MemberDTO();
			new_dto.setUserid(userid);
			new_dto.setPasswd(passwd); // 1234
			new_dto.setUsername(dto.getUsername());
			
			List<GrantedAuthority> authorities = new ArrayList<>();
			authorities.add(new  SimpleGrantedAuthority("USER")); // 현재는 모든 사용자의 role은 USER임.
			//authorities.add(new  SimpleGrantedAuthority("ADMIN")); // 필요시 ADMIN 추가 가능
			
			
			// 다음 token 정보가 세션에 저장된다.
			token = new UsernamePasswordAuthenticationToken(new_dto, null, authorities);
			
			return token;
		}
			throw new BadCredentialsException("비밀번호가 일치하지 않음");
		
	}// end authenticate 메서드

	@Override
	public boolean supports(Class<?> authentication) {
		return true;
	}

}

    8) 로그인후에 header.jsp에서  login 대신에  logout/mypage 보여주기

       - 의존성 추가
          	<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>
		


       가. security 적용전

                  <!-- 로그인 안된 경우 화면 -->
                     <c:if test="${empty login}">   
                        <ul class="navbar-nav">
                            <li class="nav-item">
                               <a class="nav-link" href="loginForm">Login</a>
                            </li>
                             <li class="nav-item">
                               <a class="nav-link" href="signup">signup</a>
                            </li>
                        </ul>
                     </c:if>


       나. security 적용후
        
	 - security taglib 적용
           https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/taglibs.html



           <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>

	        <!--  인증안된 화면 -->
        		       <sec:authorize access="isAnonymous()">
                             <li class="nav-item">
                               <a class="nav-link" href="login">login</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="signup">signup</a>
                            </li>
                       </sec:authorize>     
                            
        		       <!--  인증 된 화면 -->
        		       <sec:authorize access="isAuthenticated()">
                             <li class="nav-item">
                               <a class="nav-link" href="logout">logout</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="mypage">mypage</a>
                            </li>
                        </sec:authorize>  
                          

       다. 로그아웃 기능
        
	 -  특별하게 추가할 코드가 없음. 
	   /logout으로 요청하면 자동으로 로그아웃 처리됨.

	   이유는 다음과 같이 설정되었기 때문이다.
	   // 로그아웃 설정
		http.logout((logout) ->
				        logout.deleteCookies("remove")
				        .invalidateHttpSession(true)
				        .logoutUrl("/logout")  // SpringSecurity가 자동으로 로그아웃 처리해줄 요청매핑값
				        .logoutSuccessUrl("/home") // logout 성공시 redirect 된 요청매핑값
                   );


   9) mypage 
   
      - Authentication 얻는 방법이 필요하다.
     
     //mypage
	 @GetMapping("/mypage")
	 public String mypage(Model m) {
		 
		 // AuthProvider 에서 저장시킨 Authentication 이 필요하다.
		 Authentication auth = SecurityContextHolder.getContext().getAuthentication()
		  MemberDTO dto = (MemberDTO)auth.getPrincipal();
		 String userid = dto.getUserid();
////////////////////////////////////////////////////////////////////////////////////////////////

SpringBoot + ShopMiniMall + Spring Security


1. 의존성 추가
  
	   <dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

	<dependency>
		<groupId>org.springframework.security</groupId>
		<artifactId>spring-security-taglibs</artifactId>
	</dependency>


2.  SpringFilterChain 구현

  ==>  SecurityFilterChainConfig.java  작성
  
     //요청맵핑값 허용
	http.authorizeHttpRequests(auth->
				   auth.requestMatchers("/main","/signup","/idCheck","/login","/goodsRetrieve","/WEB-INF/**").permitAll()  
	//		                               .requestMatchers("/**").permitAll()
				       .anyRequest()
				       .authenticated()
		
					  );
 3. AuthenticationProvider  구현 및 AuthenticationService 와 AuthenticationServiceImpl 작성

  ==> 사용자가 입력된 userid 와 passwd 비교 체크 역할.
      성공하면 MemberDTO를 Authentication 에 저장함.


 4.  MemberMapper.java 와 MemberMapper.xml 수정

       # 추가
	 <select id="findByUserid" resultType="MemberDTO" parameterType="string">
	     select userid, passwd, username
	     from member
	     where userid=#{userid}
	 </select>

        # 추가
         public MemberDTO findByUserid(String userid);


 5. LoginController.java 수정
   
    -@GetMapping("/login")  만 구현하면 됨.

    @SessionAttributes(value = {"login"}) // Model에 "login" 키를 사용하면 HttpSession에 저장됨.
public class LoginController {

	
	MemberService memberService;
	
	public LoginController(MemberService memberService) {
		this.memberService = memberService;
	}

	@GetMapping("/login") 
	public String main() {
		return "loginForm";
	}
	
}


 6. MemberController.java
  
    - 회원 가입시 pw 암호화 

      	
		// 비번 암호화
		String encodedPW = new BCryptPasswordEncoder().encode(passwd);
		
		//성공한 경우
		MemberDTO dto = 
				new MemberDTO(userid, encodedPW, username, post, addr1, addr2, phone1, phone2, phone3, email1, email2);
		
		
		int n = memberService.memberAdd(dto);

 
  7. Authentication 가져오기

    ==> 이전 로그인 이후에 세션에서 가져오는 MemberDTO 역할임.

          @SessionAttributes("login")
          public class MemberController {

	     @GetMapping("/mypage")
	  public String mypage(Model m) {
		
		MemberDTO dto =(MemberDTO)m.getAttribute("login");
		String userid = dto.getUserid();
  
    ==>  // AuthProvider 에서 저장시킨 Authentication 이 필요하다.
	Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        MemberDTO dto = (MemberDTO)auth.getPrincipal();
	String userid = dto.getUserid();


     가. MemberControll.java 수정
        	@GetMapping("/mypage")
		public String mypage(Model m) {
			
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		MemberDTO dto = (MemberDTO)auth.getPrincipal();
			
			String userid = dto.getUserid();
			MemberDTO mypageDTO = memberService.mypage(userid);
			m.addAttribute("login", mypageDTO);
			
			return "mypage";
		}

     나. CartController.java 수정

         - @GetMapping("/cartAdd")
	public String cartAdd(){

	     //성공
//		MemberDTO memberDTO = (MemberDTO)m.getAttribute("login");
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
               MemberDTO memberDTO = (MemberDTO)auth.getPrincipal();
		
		String userid = memberDTO.getUserid();


         -  @GetMapping("/cartList")  // cartList.jsp
		@ModelAttribute("cartList")
		public List<CartDTO> cartList(Model m) {
			
	//		MemberDTO memberDTO = (MemberDTO)m.getAttribute("login");
			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		MemberDTO memberDTO = (MemberDTO)auth.getPrincipal();
		
		
			String userid = memberDTO.getUserid();
		
      다. OrderController.java 수정

          @GetMapping("/orderConfirm")
         public String cartAdd(@RequestParam Integer num, Model m) {
			
	CartDTO cartDTO = orderService.orderConfirm(num);
			
	//		MemberDTO dto = (MemberDTO)m.getAttribute("login");

			Authentication auth = SecurityContextHolder.getContext().getAuthentication();
			MemberDTO dto = (MemberDTO)auth.getPrincipal();
			String userid = dto.getUserid();


  8.  top.jsp 수정

      <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>

             <!-- 로그인 안된 경우 화면 -->
                     <sec:authorize access="isAnonymous()">
                        <ul class="navbar-nav">
                            <li class="nav-item">
                               <a class="nav-link" href="loginForm">Login</a>
                            </li>
                             <li class="nav-item">
                               <a class="nav-link" href="signup">signup</a>
                            </li>
                        </ul>
                     </sec:authorize>  
                        
                        <!-- 로그인된 경우 화면 -->
                     <sec:authorize access="isAuthenticated()">   
                        <ul class="navbar-nav">
                             <li class="nav-item">
                              안녕하세요. ${login.username}님
                            </li>
                            <li class="nav-item">
                               <a class="nav-link" href="logout">Logout</a>
                            </li>
                             <li class="nav-item">
                               <a class="nav-link" href="mypage">mypage</a>
                            </li>
                                <li class="nav-item">
                               <a class="nav-link" href="cartList">cartList</a>
                            </li>
                        </ul>
                     </sec:authorize>  



  9.  HandlerInterceptor 와 WebConfig.java  삭제하기